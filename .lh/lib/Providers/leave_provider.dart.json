{
    "sourceFile": "lib/Providers/leave_provider.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1741806059325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741806190573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n         'leaveType': leaveType,\r\n         'reason': reason,\r\n         'startDate': startDate,\r\n         'endDate': endDate,\r\n-        'status': 'Pending', // Default status\r\n+        'status': 'Pending', \r\n         'appliedAt': FieldValue.serverTimestamp(),\r\n       });\r\n     } catch (e) {\r\n       print(\"Error saving leave request: $e\");\r\n"
                },
                {
                    "date": 1741806196417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     required String reason,\r\n     required String startDate,\r\n     required String endDate,\r\n   }) async {\r\n-    state = true; // Set loading to true\r\n+    state = true;\r\n     try {\r\n       SharedPreferences prefs = await SharedPreferences.getInstance();\r\n       String? userEmail = prefs.getString('user_email');\r\n \r\n@@ -35,9 +35,9 @@\n       });\r\n     } catch (e) {\r\n       print(\"Error saving leave request: $e\");\r\n     } finally {\r\n-      state = false; // Stop loading\r\n+      state = false; \r\n     }\r\n   }\r\n }\r\n \r\n"
                },
                {
                    "date": 1741806270213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n     } catch (e) {\r\n       print(\"Error saving leave request: $e\");\r\n     } finally {\r\n       state = false; \r\n-      Navig\r\n+      Navigat\r\n     }\r\n   }\r\n }\r\n \r\n"
                },
                {
                    "date": 1741806306710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n     required String leaveType,\r\n     required String reason,\r\n     required String startDate,\r\n     required String endDate,\r\n+    required BuildContext context,\r\n   }) async {\r\n     state = true;\r\n     try {\r\n       SharedPreferences prefs = await SharedPreferences.getInstance();\r\n"
                }
            ],
            "date": 1741806059325,
            "name": "Commit-0",
            "content": "import 'package:cloud_firestore/cloud_firestore.dart';\r\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\r\nimport 'package:shared_preferences/shared_preferences.dart';\r\n\r\nfinal leaveRequestProvider =\r\n    StateNotifierProvider<LeaveRequestNotifier, bool>((ref) {\r\n  return LeaveRequestNotifier();\r\n});\r\n\r\nclass LeaveRequestNotifier extends StateNotifier<bool> {\r\n  LeaveRequestNotifier() : super(false); // False means no loading initially\r\n\r\n  Future<void> applyLeave({\r\n    required String leaveType,\r\n    required String reason,\r\n    required String startDate,\r\n    required String endDate,\r\n  }) async {\r\n    state = true; // Set loading to true\r\n    try {\r\n      SharedPreferences prefs = await SharedPreferences.getInstance();\r\n      String? userEmail = prefs.getString('user_email');\r\n\r\n      if (userEmail == null) throw Exception(\"User email not found\");\r\n\r\n      FirebaseFirestore firestore = FirebaseFirestore.instance;\r\n      await firestore.collection('leave_requests').add({\r\n        'userEmail': userEmail,\r\n        'leaveType': leaveType,\r\n        'reason': reason,\r\n        'startDate': startDate,\r\n        'endDate': endDate,\r\n        'status': 'Pending', // Default status\r\n        'appliedAt': FieldValue.serverTimestamp(),\r\n      });\r\n    } catch (e) {\r\n      print(\"Error saving leave request: $e\");\r\n    } finally {\r\n      state = false; // Stop loading\r\n    }\r\n  }\r\n}\r\n\r\nfinal leaveHistoryProvider = FutureProvider<List<Map<String, dynamic>>>((ref) async {\r\n  SharedPreferences prefs = await SharedPreferences.getInstance();\r\n  String? userEmail = prefs.getString('user_email');\r\n\r\n  if (userEmail == null) return [];\r\n\r\n  FirebaseFirestore firestore = FirebaseFirestore.instance;\r\n  QuerySnapshot snapshot = await firestore\r\n      .collection(\"leave_requests\")\r\n      .where(\"userEmail\", isEqualTo: userEmail)\r\n      .orderBy(\"appliedAt\", descending: true)\r\n      .get();\r\n\r\n  return snapshot.docs.map((doc) => doc.data() as Map<String, dynamic>).toList();\r\n});\r\n"
        }
    ]
}