{
    "sourceFile": "lib/Models/LoginModel.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 29,
            "patches": [
                {
                    "date": 1741784423221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741784809686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+import 'package:firebase_auth/firebase_auth.dart';\r\n+\r\n class LoginViewModel {\r\n   final FirebaseAuth _auth;\r\n \r\n   LoginViewModel(this._auth);\r\n"
                },
                {
                    "date": 1741784816816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,7 @@\n import 'package:firebase_auth/firebase_auth.dart';\r\n+import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n+import 'package:shared_preferences/shared_preferences.dart';\r\n \r\n class LoginViewModel {\r\n   final FirebaseAuth _auth;\r\n \r\n"
                },
                {
                    "date": 1741794080157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import 'package:firebase_auth/firebase_auth.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n import 'package:shared_preferences/shared_preferences.dart';\r\n+import '../Providers/Providers.dart';\r\n \r\n class LoginViewModel {\r\n   final FirebaseAuth _auth;\r\n \r\n"
                },
                {
                    "date": 1741794852000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,35 @@\n-import 'package:firebase_auth/firebase_auth.dart';\r\n+import 'package:cloud_firestore/cloud_firestore.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n import 'package:shared_preferences/shared_preferences.dart';\r\n-import '../Providers/Providers.dart';\r\n \r\n class LoginViewModel {\r\n-  final FirebaseAuth _auth;\r\n+  final FirebaseFirestore _firestore;\r\n \r\n-  LoginViewModel(this._auth);\r\n+  LoginViewModel(this._firestore);\r\n \r\n   Future<void> login(String email, String password, WidgetRef ref) async {\r\n     try {\r\n-      UserCredential userCredential = await _auth.signInWithEmailAndPassword(\r\n-        email: email,\r\n-        password: password,\r\n-      );\r\n-      ref.read(userProvider.notifier).state = userCredential.user;\r\n-      final prefs = await SharedPreferences.getInstance();\r\n-      await prefs.setString('user_email', email);\r\n+      // Check if the user exists in Firestore\r\n+      final userDoc = await _firestore.collection('users').doc(email).get();\r\n\\ No newline at end of file\n+\r\n+      if (userDoc.exists) {\r\n+        final userData = userDoc.data();\r\n+        final storedPassword = userData?['password'];\r\n+\r\n+        // Check if password matches\r\n+        if (storedPassword == password) {\r\n+          ref.read(userProvider.notifier).state = email;\r\n+          final prefs = await SharedPreferences.getInstance();\r\n+          await prefs.setString('user_email', email);\r\n+          print(\"Login successful for $email\");\r\n+        } else {\r\n+          throw Exception(\"Incorrect password\");\r\n+        }\r\n+      } else {\r\n+        throw Exception(\"User not found\");\r\n+      }\r\n     } catch (e) {\r\n       throw Exception(\"Login failed: $e\");\r\n     }\r\n   }\r\n-}\n+}\r\n"
                },
                {
                    "date": 1741794858415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,5 +31,5 @@\n     } catch (e) {\r\n       throw Exception(\"Login failed: $e\");\r\n     }\r\n   }\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1741794881868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +1,24 @@\n-import 'package:cloud_firestore/cloud_firestore.dart';\r\n+import 'package:firebase_auth/firebase_auth.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n import 'package:shared_preferences/shared_preferences.dart';\r\n+import '../Providers/Providers.dart';\r\n \r\n class LoginViewModel {\r\n-  final FirebaseFirestore _firestore;\r\n+  final FirebaseAuth _auth;\r\n \r\n-  LoginViewModel(this._firestore);\r\n+  LoginViewModel(this._auth);\r\n \r\n   Future<void> login(String email, String password, WidgetRef ref) async {\r\n     try {\r\n-      // Check if the user exists in Firestore\r\n-      final userDoc = await _firestore.collection('users').doc(email).get();\r\n-\r\n-      if (userDoc.exists) {\r\n-        final userData = userDoc.data();\r\n-        final storedPassword = userData?['password'];\r\n-\r\n-        // Check if password matches\r\n-        if (storedPassword == password) {\r\n-          ref.read(userProvider.notifier).state = email;\r\n-          final prefs = await SharedPreferences.getInstance();\r\n-          await prefs.setString('user_email', email);\r\n-          print(\"Login successful for $email\");\r\n-        } else {\r\n-          throw Exception(\"Incorrect password\");\r\n-        }\r\n-      } else {\r\n-        throw Exception(\"User not found\");\r\n-      }\r\n+      UserCredential userCredential = await _auth.signInWithEmailAndPassword(\r\n+        email: email,\r\n+        password: password,\r\n+      );\r\n+      ref.read(userProvider.notifier).state = userCredential.user;\r\n+      final prefs = await SharedPreferences.getInstance();\r\n+      await prefs.setString('user_email', email);\r\n     } catch (e) {\r\n       throw Exception(\"Login failed: $e\");\r\n     }\r\n   }\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741794905094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,35 @@\n-import 'package:firebase_auth/firebase_auth.dart';\r\n+import 'package:cloud_firestore/cloud_firestore.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n import 'package:shared_preferences/shared_preferences.dart';\r\n-import '../Providers/Providers.dart';\r\n \r\n class LoginViewModel {\r\n-  final FirebaseAuth _auth;\r\n+  final FirebaseFirestore _firestore;\r\n \r\n-  LoginViewModel(this._auth);\r\n+  LoginViewModel(this._firestore);\r\n \r\n   Future<void> login(String email, String password, WidgetRef ref) async {\r\n     try {\r\n-      UserCredential userCredential = await _auth.signInWithEmailAndPassword(\r\n-        email: email,\r\n-        password: password,\r\n-      );\r\n-      ref.read(userProvider.notifier).state = userCredential.user;\r\n-      final prefs = await SharedPreferences.getInstance();\r\n-      await prefs.setString('user_email', email);\r\n+      // Check if the user exists in Firestore\r\n+      final userDoc = await _firestore.collection('users').doc(email).get();\r\n\\ No newline at end of file\n+\r\n+      if (userDoc.exists) {\r\n+        final userData = userDoc.data();\r\n+        final storedPassword = userData?['password'];\r\n+\r\n+        // Check if password matches\r\n+        if (storedPassword == password) {\r\n+          ref.read(userProvider.notifier).state = email;\r\n+          final prefs = await SharedPreferences.getInstance();\r\n+          await prefs.setString('user_email', email);\r\n+          print(\"Login successful for $email\");\r\n+        } else {\r\n+          throw Exception(\"Incorrect password\");\r\n+        }\r\n+      } else {\r\n+        throw Exception(\"User not found\");\r\n+      }\r\n     } catch (e) {\r\n       throw Exception(\"Login failed: $e\");\r\n     }\r\n   }\r\n-}\n+}\r\n"
                },
                {
                    "date": 1741795083982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +1,132 @@\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n-import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n import 'package:shared_preferences/shared_preferences.dart';\r\n \r\n+// 🔹 User Provider (Manages Logged-in User State)\r\n+final userProvider = StateProvider<String?>((ref) => null);\r\n+\r\n+// 🔹 Firestore Provider (To Access Firestore Database)\r\n+final firestoreProvider = Provider<FirebaseFirestore>((ref) {\r\n+  return FirebaseFirestore.instance;\r\n+});\r\n+\r\n+// 🔹 Login ViewModel\r\n class LoginViewModel {\r\n   final FirebaseFirestore _firestore;\r\n+  final WidgetRef _ref;\r\n \r\n-  LoginViewModel(this._firestore);\r\n+  LoginViewModel(this._firestore, this._ref);\r\n \r\n-  Future<void> login(String email, String password, WidgetRef ref) async {\r\n+  // 🔹 Login Method\r\n+  Future<void> login(String email, String password) async {\r\n     try {\r\n-      // Check if the user exists in Firestore\r\n       final userDoc = await _firestore.collection('users').doc(email).get();\r\n \r\n       if (userDoc.exists) {\r\n         final userData = userDoc.data();\r\n         final storedPassword = userData?['password'];\r\n \r\n-        // Check if password matches\r\n         if (storedPassword == password) {\r\n\\ No newline at end of file\n-          ref.read(userProvider.notifier).state = email;\r\n+          _ref.read(userProvider.notifier).state = email;\r\n           final prefs = await SharedPreferences.getInstance();\r\n           await prefs.setString('user_email', email);\r\n-          print(\"Login successful for $email\");\r\n+          print(\"✅ Login successful: $email\");\r\n         } else {\r\n-          throw Exception(\"Incorrect password\");\r\n+          throw Exception(\"❌ Incorrect password\");\r\n         }\r\n       } else {\r\n-        throw Exception(\"User not found\");\r\n+        throw Exception(\"❌ User not found\");\r\n       }\r\n     } catch (e) {\r\n       throw Exception(\"Login failed: $e\");\r\n     }\r\n   }\r\n-}\n+\r\n+  // 🔹 Register New User\r\n+  Future<void> registerUser(String email, String password) async {\r\n+    try {\r\n+      await _firestore.collection('users').doc(email).set({\r\n+        'email': email,\r\n+        'password': password, // ❗ Store securely using hashing in production\r\n+        'createdAt': FieldValue.serverTimestamp(),\r\n+      });\r\n+      print(\"✅ User registered successfully!\");\r\n+    } catch (e) {\r\n+      print(\"❌ Registration failed: $e\");\r\n+    }\r\n+  }\r\n+\r\n+  // 🔹 Logout Method\r\n+  Future<void> logout() async {\r\n+    _ref.read(userProvider.notifier).state = null;\r\n+    final prefs = await SharedPreferences.getInstance();\r\n+    await prefs.remove('user_email');\r\n+    print(\"✅ Logged out successfully!\");\r\n+  }\r\n+}\r\n+\r\n+// 🔹 Login Screen UI\r\n+class LoginScreen extends ConsumerWidget {\r\n+  LoginScreen({Key? key}) : super(key: key);\r\n+\r\n+  final TextEditingController emailController = TextEditingController();\r\n+  final TextEditingController passwordController = TextEditingController();\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context, WidgetRef ref) {\r\n+    final firestore = ref.read(firestoreProvider);\r\n+    final loginViewModel = LoginViewModel(firestore, ref);\r\n+    final user = ref.watch(userProvider);\r\n+\r\n+    return Scaffold(\r\n+      appBar: AppBar(title: Text(user != null ? \"Welcome, $user\" : \"Login\")),\r\n+      body: Padding(\r\n+        padding: const EdgeInsets.all(16.0),\r\n+        child: Column(\r\n+          children: [\r\n+            TextField(\r\n+              controller: emailController,\r\n+              decoration: InputDecoration(labelText: \"Email\"),\r\n+            ),\r\n+            TextField(\r\n+              controller: passwordController,\r\n+              decoration: InputDecoration(labelText: \"Password\"),\r\n+              obscureText: true,\r\n+            ),\r\n+            SizedBox(height: 20),\r\n+            ElevatedButton(\r\n+              onPressed: () async {\r\n+                await loginViewModel.login(\r\n+                  emailController.text.trim(),\r\n+                  passwordController.text.trim(),\r\n+                );\r\n+              },\r\n+              child: Text(\"Login\"),\r\n+            ),\r\n+            ElevatedButton(\r\n+              onPressed: () async {\r\n+                await loginViewModel.registerUser(\r\n+                  emailController.text.trim(),\r\n+                  passwordController.text.trim(),\r\n+                );\r\n+              },\r\n+              child: Text(\"Register\"),\r\n+            ),\r\n+            if (user != null)\r\n+              ElevatedButton(\r\n+                onPressed: () async {\r\n+                  await loginViewModel.logout();\r\n+                },\r\n+                child: Text(\"Logout\"),\r\n+              ),\r\n+          ],\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+void main() {\r\n+  runApp(ProviderScope(child: MaterialApp(home: LoginScreen())));\r\n+}\r\n"
                },
                {
                    "date": 1741795096356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,67 +66,5 @@\n   }\r\n }\r\n \r\n // 🔹 Login Screen UI\r\n-class LoginScreen extends ConsumerWidget {\r\n-  LoginScreen({Key? key}) : super(key: key);\r\n \r\n-  final TextEditingController emailController = TextEditingController();\r\n-  final TextEditingController passwordController = TextEditingController();\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context, WidgetRef ref) {\r\n-    final firestore = ref.read(firestoreProvider);\r\n-    final loginViewModel = LoginViewModel(firestore, ref);\r\n-    final user = ref.watch(userProvider);\r\n-\r\n-    return Scaffold(\r\n-      appBar: AppBar(title: Text(user != null ? \"Welcome, $user\" : \"Login\")),\r\n-      body: Padding(\r\n-        padding: const EdgeInsets.all(16.0),\r\n-        child: Column(\r\n-          children: [\r\n-            TextField(\r\n-              controller: emailController,\r\n-              decoration: InputDecoration(labelText: \"Email\"),\r\n-            ),\r\n-            TextField(\r\n-              controller: passwordController,\r\n-              decoration: InputDecoration(labelText: \"Password\"),\r\n-              obscureText: true,\r\n-            ),\r\n-            SizedBox(height: 20),\r\n-            ElevatedButton(\r\n-              onPressed: () async {\r\n-                await loginViewModel.login(\r\n-                  emailController.text.trim(),\r\n-                  passwordController.text.trim(),\r\n-                );\r\n-              },\r\n-              child: Text(\"Login\"),\r\n-            ),\r\n-            ElevatedButton(\r\n-              onPressed: () async {\r\n-                await loginViewModel.registerUser(\r\n-                  emailController.text.trim(),\r\n-                  passwordController.text.trim(),\r\n-                );\r\n-              },\r\n-              child: Text(\"Register\"),\r\n-            ),\r\n-            if (user != null)\r\n-              ElevatedButton(\r\n-                onPressed: () async {\r\n-                  await loginViewModel.logout();\r\n-                },\r\n-                child: Text(\"Logout\"),\r\n-              ),\r\n-          ],\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-void main() {\r\n-  runApp(ProviderScope(child: MaterialApp(home: LoginScreen())));\r\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741795312751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-import 'package:flutter/material.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n import 'package:shared_preferences/shared_preferences.dart';\r\n \r\n@@ -47,9 +46,9 @@\n   Future<void> registerUser(String email, String password) async {\r\n     try {\r\n       await _firestore.collection('users').doc(email).set({\r\n         'email': email,\r\n-        'password': password, // ❗ Store securely using hashing in production\r\n+        'password': password,\r\n         'createdAt': FieldValue.serverTimestamp(),\r\n       });\r\n       print(\"✅ User registered successfully!\");\r\n     } catch (e) {\r\n"
                },
                {
                    "date": 1741795321183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,8 @@\n       throw Exception(\"Login failed: $e\");\r\n     }\r\n   }\r\n \r\n-  // 🔹 Register New User\r\n   Future<void> registerUser(String email, String password) async {\r\n     try {\r\n       await _firestore.collection('users').doc(email).set({\r\n         'email': email,\r\n@@ -55,15 +54,13 @@\n       print(\"❌ Registration failed: $e\");\r\n     }\r\n   }\r\n \r\n-  // 🔹 Logout Method\r\n   Future<void> logout() async {\r\n     _ref.read(userProvider.notifier).state = null;\r\n     final prefs = await SharedPreferences.getInstance();\r\n     await prefs.remove('user_email');\r\n     print(\"✅ Logged out successfully!\");\r\n   }\r\n }\r\n \r\n-// 🔹 Login Screen UI\r\n \r\n"
                },
                {
                    "date": 1741795326689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,16 +9,14 @@\n final firestoreProvider = Provider<FirebaseFirestore>((ref) {\r\n   return FirebaseFirestore.instance;\r\n });\r\n \r\n-// 🔹 Login ViewModel\r\n class LoginViewModel {\r\n   final FirebaseFirestore _firestore;\r\n   final WidgetRef _ref;\r\n \r\n   LoginViewModel(this._firestore, this._ref);\r\n \r\n-  // 🔹 Login Method\r\n   Future<void> login(String email, String password) async {\r\n     try {\r\n       final userDoc = await _firestore.collection('users').doc(email).get();\r\n \r\n"
                },
                {
                    "date": 1741795465838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,11 @@\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n import 'package:shared_preferences/shared_preferences.dart';\r\n+import 'package:fluttertoast/fluttertoast.dart';\r\n \r\n-// 🔹 User Provider (Manages Logged-in User State)\r\n final userProvider = StateProvider<String?>((ref) => null);\r\n \r\n-// 🔹 Firestore Provider (To Access Firestore Database)\r\n final firestoreProvider = Provider<FirebaseFirestore>((ref) {\r\n   return FirebaseFirestore.instance;\r\n });\r\n \r\n@@ -29,15 +28,15 @@\n           final prefs = await SharedPreferences.getInstance();\r\n           await prefs.setString('user_email', email);\r\n           print(\"✅ Login successful: $email\");\r\n         } else {\r\n-          throw Exception(\"❌ Incorrect password\");\r\n+          Fluttertoast.showToast(msg: \"❌ Incorrect password\");\r\n         }\r\n       } else {\r\n-        throw Exception(\"❌ User not found\");\r\n+        Fluttertoast.showToast(msg: \"❌ User not found\");\r\n       }\r\n     } catch (e) {\r\n-      throw Exception(\"Login failed: $e\");\r\n+      Fluttertoast.showToast(msg: \"❌ Login failed: ${e.toString()}\");\r\n     }\r\n   }\r\n \r\n   Future<void> registerUser(String email, String password) async {\r\n@@ -46,19 +45,17 @@\n         'email': email,\r\n         'password': password,\r\n         'createdAt': FieldValue.serverTimestamp(),\r\n       });\r\n-      print(\"✅ User registered successfully!\");\r\n+      Fluttertoast.showToast(msg: \"✅ User registered successfully!\");\r\n     } catch (e) {\r\n-      print(\"❌ Registration failed: $e\");\r\n+      Fluttertoast.showToast(msg: \"❌ Registration failed: ${e.toString()}\");\r\n     }\r\n   }\r\n \r\n   Future<void> logout() async {\r\n     _ref.read(userProvider.notifier).state = null;\r\n     final prefs = await SharedPreferences.getInstance();\r\n     await prefs.remove('user_email');\r\n-    print(\"✅ Logged out successfully!\");\r\n+    Fluttertoast.showToast(msg: \"✅ Logged out successfully!\");\r\n   }\r\n }\r\n-\r\n-\r\n"
                },
                {
                    "date": 1741795556566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,32 +14,9 @@\n   final WidgetRef _ref;\r\n \r\n   LoginViewModel(this._firestore, this._ref);\r\n \r\n-  Future<void> login(String email, String password) async {\r\n-    try {\r\n-      final userDoc = await _firestore.collection('users').doc(email).get();\r\n \r\n-      if (userDoc.exists) {\r\n-        final userData = userDoc.data();\r\n-        final storedPassword = userData?['password'];\r\n-\r\n-        if (storedPassword == password) {\r\n-          _ref.read(userProvider.notifier).state = email;\r\n-          final prefs = await SharedPreferences.getInstance();\r\n-          await prefs.setString('user_email', email);\r\n-          print(\"✅ Login successful: $email\");\r\n-        } else {\r\n-          Fluttertoast.showToast(msg: \"❌ Incorrect password\");\r\n-        }\r\n-      } else {\r\n-        Fluttertoast.showToast(msg: \"❌ User not found\");\r\n-      }\r\n-    } catch (e) {\r\n-      Fluttertoast.showToast(msg: \"❌ Login failed: ${e.toString()}\");\r\n-    }\r\n-  }\r\n-\r\n   Future<void> registerUser(String email, String password) async {\r\n     try {\r\n       await _firestore.collection('users').doc(email).set({\r\n         'email': email,\r\n"
                },
                {
                    "date": 1741796246872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         'createdAt': FieldValue.serverTimestamp(),\r\n       });\r\n       Fluttertoast.showToast(msg: \"✅ User registered successfully!\");\r\n     } catch (e) {\r\n-      Fluttertoast.showToast(msg: \"❌ Registration failed: ${e.toString()}\");\r\n+      Fluttertoast.showToast(msg: \"Registration failed: ${e.toString()}\");\r\n     }\r\n   }\r\n \r\n   Future<void> logout() async {\r\n"
                },
                {
                    "date": 1741796254600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         'email': email,\r\n         'password': password,\r\n         'createdAt': FieldValue.serverTimestamp(),\r\n       });\r\n-      Fluttertoast.showToast(msg: \"✅ User registered successfully!\");\r\n+      Fluttertoast.showToast(msg: \"Employee registered successfully!\");\r\n     } catch (e) {\r\n       Fluttertoast.showToast(msg: \"Registration failed: ${e.toString()}\");\r\n     }\r\n   }\r\n"
                },
                {
                    "date": 1741796331430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n         'password': password,\r\n         'createdAt': FieldValue.serverTimestamp(),\r\n       });\r\n       Fluttertoast.showToast(msg: \"Employee registered successfully!\");\r\n+      Navigator\r\n     } catch (e) {\r\n       Fluttertoast.showToast(msg: \"Registration failed: ${e.toString()}\");\r\n     }\r\n   }\r\n"
                },
                {
                    "date": 1741796343630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,12 @@\n         'password': password,\r\n         'createdAt': FieldValue.serverTimestamp(),\r\n       });\r\n       Fluttertoast.showToast(msg: \"Employee registered successfully!\");\r\n-      Navigator\r\n+      Navigator.of(context).pushReplacement(\r\n+                      MaterialPageRoute(\r\n+                          builder: (context) => AttendanceScreen()),\r\n+                    );\r\n     } catch (e) {\r\n       Fluttertoast.showToast(msg: \"Registration failed: ${e.toString()}\");\r\n     }\r\n   }\r\n"
                },
                {
                    "date": 1741796349808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,12 @@\n+import 'package:flutter/material.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n import 'package:shared_preferences/shared_preferences.dart';\r\n import 'package:fluttertoast/fluttertoast.dart';\r\n \r\n+import '../Screens/Attendance.dart';\r\n+\r\n final userProvider = StateProvider<String?>((ref) => null);\r\n \r\n final firestoreProvider = Provider<FirebaseFirestore>((ref) {\r\n   return FirebaseFirestore.instance;\r\n"
                },
                {
                    "date": 1741796361061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n         'password': password,\r\n         'createdAt': FieldValue.serverTimestamp(),\r\n       });\r\n       Fluttertoast.showToast(msg: \"Employee registered successfully!\");\r\n-      Navigator.of(context).pushReplacement(\r\n+      Navigator.of(\r\n                       MaterialPageRoute(\r\n                           builder: (context) => AttendanceScreen()),\r\n                     );\r\n     } catch (e) {\r\n"
                },
                {
                    "date": 1741796382850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,17 +18,17 @@\n \r\n   LoginViewModel(this._firestore, this._ref);\r\n \r\n \r\n-  Future<void> registerUser(String email, String password) async {\r\n+  Future<void> registerUser(BuildContext context, String email, String password) async {\r\n     try {\r\n       await _firestore.collection('users').doc(email).set({\r\n         'email': email,\r\n         'password': password,\r\n         'createdAt': FieldValue.serverTimestamp(),\r\n       });\r\n       Fluttertoast.showToast(msg: \"Employee registered successfully!\");\r\n-      Navigator.of(\r\n+      Navigator.of(context).pushReplacement(\r\n                       MaterialPageRoute(\r\n                           builder: (context) => AttendanceScreen()),\r\n                     );\r\n     } catch (e) {\r\n"
                },
                {
                    "date": 1741796411084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,21 +17,20 @@\n   final WidgetRef _ref;\r\n \r\n   LoginViewModel(this._firestore, this._ref);\r\n \r\n-\r\n-  Future<void> registerUser(BuildContext context, String email, String password) async {\r\n+  Future<void> registerUser(\r\n+      BuildContext context, String email, String password) async {\r\n     try {\r\n       await _firestore.collection('users').doc(email).set({\r\n         'email': email,\r\n         'password': password,\r\n         'createdAt': FieldValue.serverTimestamp(),\r\n       });\r\n       Fluttertoast.showToast(msg: \"Employee registered successfully!\");\r\n       Navigator.of(context).pushReplacement(\r\n-                      MaterialPageRoute(\r\n-                          builder: (context) => AttendanceScreen()),\r\n-                    );\r\n+        MaterialPageRoute(builder: (context) => AttendanceScreen()),\r\n+      );\r\n     } catch (e) {\r\n       Fluttertoast.showToast(msg: \"Registration failed: ${e.toString()}\");\r\n     }\r\n   }\r\n"
                },
                {
                    "date": 1741796442623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n       Navigator.of(context).pushReplacement(\r\n         MaterialPageRoute(builder: (context) => AttendanceScreen()),\r\n       );\r\n     } catch (e) {\r\n-      Fluttertoast.showToast(msg: \"Registration failed: ${e.toString()}\");\r\n+      Fluttertoast.showToast(msg: \"Registration failed\");\r\n     }\r\n   }\r\n \r\n   Future<void> logout() async {\r\n"
                },
                {
                    "date": 1741796832485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n   final WidgetRef _ref;\r\n \r\n   LoginViewModel(this._firestore, this._ref);\r\n \r\n-  Future<void> registerUser(\r\n+  Future<bool> registerUser(\r\n       BuildContext context, String email, String password) async {\r\n     try {\r\n       await _firestore.collection('users').doc(email).set({\r\n         'email': email,\r\n"
                },
                {
                    "date": 1741796859407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n         'password': password,\r\n         'createdAt': FieldValue.serverTimestamp(),\r\n       });\r\n       Fluttertoast.showToast(msg: \"Employee registered successfully!\");\r\n+      return true;\r\n       Navigator.of(context).pushReplacement(\r\n         MaterialPageRoute(builder: (context) => AttendanceScreen()),\r\n       );\r\n     } catch (e) {\r\n"
                },
                {
                    "date": 1741796864771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,12 +26,13 @@\n         'password': password,\r\n         'createdAt': FieldValue.serverTimestamp(),\r\n       });\r\n       Fluttertoast.showToast(msg: \"Employee registered successfully!\");\r\n-      return true;\r\n+      \r\n       Navigator.of(context).pushReplacement(\r\n         MaterialPageRoute(builder: (context) => AttendanceScreen()),\r\n       );\r\n+      \r\n     } catch (e) {\r\n       Fluttertoast.showToast(msg: \"Registration failed\");\r\n     }\r\n   }\r\n"
                },
                {
                    "date": 1741796878904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,11 @@\n       );\r\n       \r\n     } catch (e) {\r\n       Fluttertoast.showToast(msg: \"Registration failed\");\r\n+      return false;\r\n     }\r\n+    return true;\r\n   }\r\n \r\n   Future<void> logout() async {\r\n     _ref.read(userProvider.notifier).state = null;\r\n"
                },
                {
                    "date": 1741796887569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,13 +26,12 @@\n         'password': password,\r\n         'createdAt': FieldValue.serverTimestamp(),\r\n       });\r\n       Fluttertoast.showToast(msg: \"Employee registered successfully!\");\r\n-      \r\n+\r\n       Navigator.of(context).pushReplacement(\r\n         MaterialPageRoute(builder: (context) => AttendanceScreen()),\r\n       );\r\n-      \r\n     } catch (e) {\r\n       Fluttertoast.showToast(msg: \"Registration failed\");\r\n       return false;\r\n     }\r\n"
                },
                {
                    "date": 1741803198635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n   LoginViewModel(this._firestore, this._ref);\r\n \r\n   Future<bool> registerUser(\r\n       BuildContext context, String email, String password) async {\r\n-        \r\n+        fi\r\n     try {\r\n       await _firestore.collection('users').doc(email).set({\r\n         'email': email,\r\n         'password': password,\r\n"
                }
            ],
            "date": 1741784423221,
            "name": "Commit-0",
            "content": "class LoginViewModel {\r\n  final FirebaseAuth _auth;\r\n\r\n  LoginViewModel(this._auth);\r\n\r\n  Future<void> login(String email, String password, WidgetRef ref) async {\r\n    try {\r\n      UserCredential userCredential = await _auth.signInWithEmailAndPassword(\r\n        email: email,\r\n        password: password,\r\n      );\r\n      ref.read(userProvider.notifier).state = userCredential.user;\r\n      final prefs = await SharedPreferences.getInstance();\r\n      await prefs.setString('user_email', email);\r\n    } catch (e) {\r\n      throw Exception(\"Login failed: $e\");\r\n    }\r\n  }\r\n}"
        }
    ]
}